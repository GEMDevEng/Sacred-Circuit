import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Search,
  Filter,
  Archive,
  MessageSquare,
  Calendar,
  Tag,
  MoreVertical,
  Trash2,
  Share2,
  Edit3,
  Clock,
  Check
} from 'lucide-react';
import { Conversation, ConversationFilters } from '../../types';
import { Button } from '../common/Button';
import { Input } from '../common/FormInput';
import { Modal } from '../common/Modal';

interface ConversationHistoryProps {
  conversations: Conversation[];
  onSelectConversation: (conversation: Conversation) => void;
  onCreateConversation: () => void;
  onUpdateConversation: (id: string, updates: Partial<Conversation>) => void;
  onArchiveConversation: (id: string, archived: boolean) => void;
  onDeleteConversation?: (id: string) => void;
  onShareConversation?: (id: string) => void;
  isLoading?: boolean;
}

/**
 * Conversation history sidebar component
 */
export const ConversationHistory: React.FC<ConversationHistoryProps> = ({
  conversations,
  onSelectConversation,
  onCreateConversation,
  onUpdateConversation,
  onArchiveConversation,
  onDeleteConversation,
  onShareConversation,
  isLoading = false
}) => {
  const [searchQuery, setSearchQuery] = useState('');\n  const [filters, setFilters] = useState<ConversationFilters>({});\n  const [showFilters, setShowFilters] = useState(false);\n  const [selectedConversation, setSelectedConversation] = useState<string | null>(null);\n  const [editingConversation, setEditingConversation] = useState<string | null>(null);\n  const [editTitle, setEditTitle] = useState('');\n\n  // Filter conversations based on search and filters\n  const filteredConversations = conversations.filter(conversation => {\n    // Search filter\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase();\n      const matchesTitle = conversation.title.toLowerCase().includes(query);\n      const matchesLastMessage = conversation.lastMessage?.toLowerCase().includes(query);\n      const matchesTags = conversation.tags?.some(tag => \n        tag.toLowerCase().includes(query)\n      );\n      \n      if (!matchesTitle && !matchesLastMessage && !matchesTags) {\n        return false;\n      }\n    }\n\n    // Date filters\n    if (filters.dateFrom) {\n      const conversationDate = new Date(conversation.createdAt);\n      const fromDate = new Date(filters.dateFrom);\n      if (conversationDate < fromDate) return false;\n    }\n\n    if (filters.dateTo) {\n      const conversationDate = new Date(conversation.createdAt);\n      const toDate = new Date(filters.dateTo);\n      if (conversationDate > toDate) return false;\n    }\n\n    // Archive filter\n    if (filters.archived !== undefined && conversation.archived !== filters.archived) {\n      return false;\n    }\n\n    // Tags filter\n    if (filters.tags && filters.tags.length > 0) {\n      const hasMatchingTag = filters.tags.some(filterTag => \n        conversation.tags?.includes(filterTag)\n      );\n      if (!hasMatchingTag) return false;\n    }\n\n    return true;\n  });\n\n  const handleEditTitle = (conversation: Conversation) => {\n    setEditingConversation(conversation.id);\n    setEditTitle(conversation.title);\n  };\n\n  const handleSaveTitle = () => {\n    if (editingConversation && editTitle.trim()) {\n      onUpdateConversation(editingConversation, { title: editTitle.trim() });\n    }\n    setEditingConversation(null);\n    setEditTitle('');\n  };\n\n  const handleCancelEdit = () => {\n    setEditingConversation(null);\n    setEditTitle('');\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);\n\n    if (diffInHours < 24) {\n      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n    } else if (diffInHours < 24 * 7) {\n      return date.toLocaleDateString([], { weekday: 'short' });\n    } else {\n      return date.toLocaleDateString([], { month: 'short', day: 'numeric' });\n    }\n  };\n\n  const getConversationPreview = (conversation: Conversation) => {\n    if (conversation.lastMessage) {\n      return conversation.lastMessage.length > 60 \n        ? conversation.lastMessage.substring(0, 60) + '...'\n        : conversation.lastMessage;\n    }\n    return 'No messages yet';\n  };\n\n  return (\n    <div className=\"w-80 bg-white border-r border-gray-200 flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">Conversations</h2>\n          <Button\n            variant=\"primary\"\n            size=\"sm\"\n            onClick={onCreateConversation}\n            className=\"text-xs\"\n          >\n            New Chat\n          </Button>\n        </div>\n\n        {/* Search */}\n        <div className=\"relative mb-3\">\n          <Search size={16} className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search conversations...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10 text-sm\"\n          />\n        </div>\n\n        {/* Filter toggle */}\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setShowFilters(!showFilters)}\n          className=\"w-full justify-start text-sm\"\n        >\n          <Filter size={16} className=\"mr-2\" />\n          Filters\n          {Object.keys(filters).length > 0 && (\n            <span className=\"ml-auto bg-primary-100 text-primary-600 text-xs px-2 py-1 rounded\">\n              {Object.keys(filters).length}\n            </span>\n          )}\n        </Button>\n      </div>\n\n      {/* Filters panel */}\n      <AnimatePresence>\n        {showFilters && (\n          <motion.div\n            initial={{ height: 0, opacity: 0 }}\n            animate={{ height: 'auto', opacity: 1 }}\n            exit={{ height: 0, opacity: 0 }}\n            className=\"border-b border-gray-200 p-4 space-y-3\"\n          >\n            <div className=\"grid grid-cols-2 gap-2\">\n              <Input\n                type=\"date\"\n                label=\"From\"\n                value={filters.dateFrom || ''}\n                onChange={(e) => setFilters(prev => ({ ...prev, dateFrom: e.target.value }))}\n                className=\"text-xs\"\n              />\n              <Input\n                type=\"date\"\n                label=\"To\"\n                value={filters.dateTo || ''}\n                onChange={(e) => setFilters(prev => ({ ...prev, dateTo: e.target.value }))}\n                className=\"text-xs\"\n              />\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <label className=\"flex items-center space-x-2 text-sm\">\n                <input\n                  type=\"checkbox\"\n                  checked={filters.archived === true}\n                  onChange={(e) => setFilters(prev => ({ \n                    ...prev, \n                    archived: e.target.checked ? true : undefined \n                  }))}\n                  className=\"rounded\"\n                />\n                <span>Show archived</span>\n              </label>\n            </div>\n\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setFilters({})}\n              className=\"w-full text-xs\"\n            >\n              Clear filters\n            </Button>\n          </motion.div>\n        )}\n      </AnimatePresence>\n\n      {/* Conversations list */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {isLoading ? (\n          <div className=\"p-4 text-center text-gray-500\">\n            <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary-500 mx-auto mb-2\"></div>\n            Loading conversations...\n          </div>\n        ) : filteredConversations.length === 0 ? (\n          <div className=\"p-4 text-center text-gray-500\">\n            {searchQuery || Object.keys(filters).length > 0 ? (\n              <div>\n                <Search size={24} className=\"mx-auto mb-2 text-gray-400\" />\n                <p>No conversations found</p>\n                <p className=\"text-xs mt-1\">Try adjusting your search or filters</p>\n              </div>\n            ) : (\n              <div>\n                <MessageSquare size={24} className=\"mx-auto mb-2 text-gray-400\" />\n                <p>No conversations yet</p>\n                <p className=\"text-xs mt-1\">Start a new conversation to begin</p>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"space-y-1 p-2\">\n            {filteredConversations.map((conversation) => (\n              <motion.div\n                key={conversation.id}\n                initial={{ opacity: 0, x: -20 }}\n                animate={{ opacity: 1, x: 0 }}\n                className={`\n                  relative group p-3 rounded-lg cursor-pointer transition-colors\n                  hover:bg-gray-50 border border-transparent\n                  ${selectedConversation === conversation.id ? 'bg-primary-50 border-primary-200' : ''}\n                  ${conversation.archived ? 'opacity-60' : ''}\n                `}\n                onClick={() => {\n                  setSelectedConversation(conversation.id);\n                  onSelectConversation(conversation);\n                }}\n              >\n                {/* Conversation header */}\n                <div className=\"flex items-start justify-between mb-1\">\n                  <div className=\"flex-1 min-w-0\">\n                    {editingConversation === conversation.id ? (\n                      <div className=\"flex items-center space-x-1\">\n                        <Input\n                          type=\"text\"\n                          value={editTitle}\n                          onChange={(e) => setEditTitle(e.target.value)}\n                          onKeyDown={(e) => {\n                            if (e.key === 'Enter') handleSaveTitle();\n                            if (e.key === 'Escape') handleCancelEdit();\n                          }}\n                          className=\"text-sm font-medium\"\n                          autoFocus\n                        />\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            handleSaveTitle();\n                          }}\n                          className=\"p-1\"\n                        >\n                          <Check size={12} />\n                        </Button>\n                      </div>\n                    ) : (\n                      <h3 className=\"font-medium text-gray-900 truncate text-sm\">\n                        {conversation.title}\n                      </h3>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                    {conversation.archived && (\n                      <Archive size={12} className=\"text-gray-400\" />\n                    )}\n                    \n                    <div className=\"relative\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          // Toggle dropdown menu\n                        }}\n                        className=\"p-1\"\n                      >\n                        <MoreVertical size={12} />\n                      </Button>\n                      \n                      {/* Dropdown menu would go here */}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Conversation preview */}\n                <p className=\"text-xs text-gray-600 mb-2 line-clamp-2\">\n                  {getConversationPreview(conversation)}\n                </p>\n\n                {/* Conversation metadata */}\n                <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Clock size={10} />\n                    <span>{formatDate(conversation.updatedAt)}</span>\n                    <span>•</span>\n                    <span>{conversation.messageCount} messages</span>\n                  </div>\n                  \n                  {conversation.tags && conversation.tags.length > 0 && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Tag size={10} />\n                      <span>{conversation.tags.length}</span>\n                    </div>\n                  )}\n                </div>\n\n                {/* Tags */}\n                {conversation.tags && conversation.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-1 mt-2\">\n                    {conversation.tags.slice(0, 3).map((tag, index) => (\n                      <span\n                        key={index}\n                        className=\"inline-block bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                    {conversation.tags.length > 3 && (\n                      <span className=\"text-xs text-gray-500\">\n                        +{conversation.tags.length - 3} more\n                      </span>\n                    )}\n                  </div>\n                )}\n              </motion.div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default ConversationHistory;
